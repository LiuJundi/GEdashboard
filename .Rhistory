#'
#' @param decreasing If TRUE, sorts the result in decreasing order
#'
#' @example /inst/examples/examples_compute_pagerank.R
@export
compute_pagerank <- function(mirror, decreasing = TRUE){
pdb <- getPackages(mirror)
g <- getGraph(pdb)
pr <- page.rank(g, directed = FALSE)$vector
if(decreasing) sort(pr, decreasing = TRUE) else pr
}
#' Plots the dependency graph
#'
#' @inheritParams compute_pagerank
#' @param top integer that indicates how many packages to include in the graph
#' @param cex character expansion ratio for plot
#' @param random.seed A random seed value. Used by igraph to initialise the plot layout. The function resets the seed to the original value, i.e. it will not have any impact on the random value stream in your R session.
#'
#' @export
plot_graph <- function(mirror, top = 25, cex = 0.5, random.seed = 1){
pdb <- getPackages(mirror)
g <- getGraph(pdb)
pr <- compute_pagerank(mirror, decreasing = TRUE)
pr <- names(head(pr, top))
pdb <- getGraph(pdb, pr)
old.seed <- .Random.seed
on.exit(.Random.seed <- old.seed)
set.seed(random.seed)
plot(pdb, main = sprintf("Top %s packages by page rank", length(pr)), cex = cex)
}
MRAN <- "https://mran.revolutionanalytics.com/snapshot/2017-05-15/"
pr <- compute_pagerank(MRAN)
MRAN_1 <- "https://mran.revolutionanalytics.com/snapshot/2014-09-09/"
pr_1 <- compute_pagerank(MRAN_1)
MRAN <- "https://mran.revolutionanalytics.com/snapshot/2017-06-06/"
pr <- compute_pagerank(MRAN)
plot_graph(MRAN, 10)
plot_graph(MRAN, 10, cex = 0.8)
plot_graph(MRAN, 10, cex = 1.5)
plot_graph(MRAN, 10, cex = 0.8)
?plot
plot_graph <- function(mirror, top = 25, cex = 0.5, random.seed = 1){
pdb <- getPackages(mirror)
g <- getGraph(pdb)
pr <- compute_pagerank(mirror, decreasing = TRUE)
pr <- names(head(pr, top))
pdb <- getGraph(pdb, pr)
old.seed <- .Random.seed
on.exit(.Random.seed <- old.seed)
set.seed(random.seed)
plot(pdb, main = sprintf("Top %s packages by page rank", length(pr)), cex = cex, pch = 10)
}
plot_graph(MRAN, 10)
plot_graph <- function(mirror, top = 25, cex = 0.5, random.seed = 1){
pdb <- getPackages(mirror)
g <- getGraph(pdb)
pr <- compute_pagerank(mirror, decreasing = TRUE)
pr <- names(head(pr, top))
pdb <- getGraph(pdb, pr)
old.seed <- .Random.seed
on.exit(.Random.seed <- old.seed)
set.seed(random.seed)
plot(pdb, main = sprintf("Top %s packages by page rank", length(pr)), cex = cex)
}
plot_graph(MRAN_1, 10, cex = 0.8)
plot_graph(MRAN_1, 10, cex = 1)
plot_graph(MRAN_1, 10, cex = 0.9)
source('~/Desktop/pagerank-master/inst/examples/examples_compute_pagerank.R', echo=TRUE)
plot_graph(MRAN_1, 25, cex = 0.9)
plot_graph(MRAN_1, 50, cex = 0.9)
plot_graph(MRAN_1, 50, cex = 0.8)
plot_graph(MRAN_1, 50, cex = 0.6)
plot_graph(MRAN_1, 50, cex = 0.7)
plot_graph(MRAN, 10, cex = 0.9)
plot_graph(MRAN, 25, cex = 0.9)
plot_graph(MRAN, 50, cex = 0.7)
cite(igraph.arpack.default)
cite("igraph")
citation("igraph")
citation("miniCRAN")
install.packages('rsconnect')
rsconnect::setAccountInfo(name='dmdii', token='20FB26F07BCD7288F59BA6FBF5858CEF', secret='poHULxY3ciPAuv+Mr8TJWoNmb8hyBieag85KCrak')
shiny::runApp('Desktop/DMDII-prototype')
runApp('Desktop/DMDII-prototype')
library(rsconnect)
rsconnect::deployApp('/Users/jundiliu/Desktop/DMDII-prototype')
runApp('Desktop/DMDII-prototype')
runApp('Desktop/DMDII-prototype')
runApp('Desktop/DMDII-prototype')
runApp('Desktop/DMDII-prototype')
rsconnect::deployApp('/Users/jundiliu/Desktop/DMDII-prototype')
setwd("/Users/jundiliu/Desktop")
?read.csv()
read.csv("PO.csv", header = TRUE, sep = " ")
read.csv("PO.csv")
read.csv("PO.csv", header = FALSE, sep = " ")
test <- read.csv("PO.csv", header = FALSE, sep = " ")
View(test)
test <- read.csv("PO.csv", header = TRUE, sep = "\t")
View(test)
library(stringdist)
library(tm)
setwd("/Users/jundiliu/Desktop/DMDII/ITAMCO")
SO.data <- read.csv("qryFrmSalesOrderLines.csv", header = TRUE,
colClasses = c(rep("factor",4),"character","numeric","factor","character","factor","factor","character","numeric","factor","numeric","character","character"))
SO.data$required_date <- as.Date(SO.data$required_date, format="%d-%b-%y")
SO.data$order_date <- as.Date(SO.data$order_date, format="%d-%b-%y")
SO.data$ship_date <- as.Date(SO.data$ship_date, format="%d-%b-%y")
View(SO.data)
summary(SO.data$required_date)
plot(SO.data$required_date)
SO.data[SO.data$required_date == "2039-01-01"]
SO.data[SO.data$required_date == "2039-01-01",]
SO.data[-SO.data$required_date == "2039-01-01",]
SO.data <- SO.data[-SO.data$required_date != "2039-01-01",]
SO.data <- SO.data[SO.data$required_date != "2039-01-01",]
summary(SO.data$required_date)
SO.data[SO.data$required_date == "2025-12-31",]
SO.data <- SO.data[SO.data$required_date != "2025-12-31",]
summary(SO.data$required_date)
SO.data <- SO.data[SO.data$required_date != "2025-12-31",]
summary(SO.data$required_date)
SO.data <- SO.data[SO.data$required_date != "2025-12-30",]
SO.data <- SO.data[SO.data$required_date != "2025-12-30",]
summary(SO.data$required_date)
SO.data <- SO.data[SO.data$required_date != "2025-12-01",]
summary(SO.data$required_date)
SO.data <- SO.data[SO.data$required_date != "2025-01-01",]
summary(SO.data$required_date)
SO.data[SO.data$required_date == "2020-12-31",]
1 <= 2
SO.data <- SO.data[SO.data$required_date <= "2017-06-01",]
SO.data <- read.csv("qryFrmSalesOrderLines.csv", header = TRUE,
colClasses = c(rep("factor",4),"character","numeric","factor","character","factor","factor","character","numeric","factor","numeric","character","character"))
SO.data$required_date <- as.Date(SO.data$required_date, format="%d-%b-%y")
SO.data$order_date <- as.Date(SO.data$order_date, format="%d-%b-%y")
SO.data$ship_date <- as.Date(SO.data$ship_date, format="%d-%b-%y")
SO.data <- SO.data[SO.data$required_date <= "2017-06-01",]
plot(SO.data$required_date)
SO.data <- SO.data[SO.data$required_date >= "2005-01-01",]
plot(SO.data$required_date)
plot(SO.data$ship_date)
SO.data <- SO.data[SO.data$ship_date >= "2005-01-01",]
plot(SO.data$ship_date)
SO.data <- read.csv("qryFrmSalesOrderLines.csv", header = TRUE,
colClasses = c(rep("factor",4),"character","numeric","factor","character","factor","factor","character","numeric","factor","numeric","character","character"))
SO.data$required_date <- as.Date(SO.data$required_date, format="%d-%b-%y")
SO.data$order_date <- as.Date(SO.data$order_date, format="%d-%b-%y")
SO.data$ship_date <- as.Date(SO.data$ship_date, format="%d-%b-%y")
SO.data <- SO.data[SO.data$required_date <= "2017-06-01",]
SO.data <- SO.data[SO.data$required_date >= "2005-01-01",]
SO.data <- SO.data[SO.data$ship_date >= "2005-01-01",]
SO.data <- SO.data[-9576,]
shiny::runApp('~/Desktop/DMDII-prototype')
runApp('~/Desktop/DMDII-prototype')
load("GEDashboard.RData")
setwd('/Users/jundiliu/Desktop/GEdashboard')
load("GEDashboard.RData")
load("GEDashboard.RData")
wd
wd()
getwd()
load("GEDashboard.RData")
load("GE Dashboard.RData")
View(df.ge)
runApp('~/Desktop/DMDII/data')
runApp()
runApp()
runApp()
?renderDataTable
runApp()
View(df.ge)
runApp()
runApp()
runApp()
runApp()
runApp()
?renderDataTable
runApp()
runApp()
runApp()
runApp()
install.packages("randomForest")
install.packages("quantregForest")
matrix(df.ge$Purchase.Order.Date)
table(df.ge$Purchase.Order.Date)
ge.bar <- table(df.ge$Purchase.Order.Date)
df.ge$Purchase.Order.Date <- as.Date(df.ge$Purchase.Order.Date, format="%d-%b-%y")
summary(df.ge$Purchase.Order.Date)
load("GE Dashboard.RData")
View(df.ge)
df.ge$Purchase.Order.Date <- as.Date(df.ge$Purchase.Order.Date, format="%b %d, %Y")
View(df.ge)
summary(df.ge$Purchase.Order.Date)
ge.bar <- table(df.ge$Purchase.Order.Date)
summary(ge.bar)
ge.bar <- as.data.frame(table(df.ge$Purchase.Order.Date))
View(ge.bar)
library(shiny)
library(shinydashboard)
library(plotly)
library(randomForest)
library(quantregForest)
load("GE Dashboard.RData")
df.ge$Purchase.Order.Date <- as.Date(df.ge$Purchase.Order.Date, format="%b %d, %Y")
ge.bar <- as.data.frame(table(df.ge$Purchase.Order.Date))
colnames(df.ge) <- c("Purchasing Document", "Vendor", "Material Number", "Plnt", "ABC Indicator", "Quantity", "Pdt",
"PO Cycle Time", "Purchase Order Date", "Open PO")
View(df.ge)
colnames(ge.bar) <- c("OrderData", "NumberofOrders")
plot_ly()
?plot_ly()
plot_ly(ge.bar)
colnames(ge.bar) <- c("OrderDate", "NumberofOrders")
plot_ly(ge.bar, x = ~OrderDate, y=~NumberofOrders)
plot_ly(ge.bar, x = ~OrderDate, y = ~NumberofOrders, type = 'bar')
plot_ly(ge.bar, x = ~OrderDate, y = ~NumberofOrders, type = 'bar') %>% layout(xaxis= list(title = "", tickangle = -45))
?xaxis
?format
format(ge.bar$OrderDate, "%b")
format(as.Date(ge.bar$OrderDate), "%b")
runApp()
?box
runApp()
runApp()
plot_ly(ge.bar, x = ~OrderDate, y = ~NumberofOrders, type = 'bar') %>% layout(xaxis= list(title = "", tickangle = -45))
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("DT")
runApp()
ge.bar <- ge.bar[order(ge.bar$OrderDate),]
runApp()
df.ge$Purchase.Order.Date <- as.Date(df.ge$Purchase.Order.Date, format="%b %d, %Y")
load("GE Dashboard.RData")
df.ge$Purchase.Order.Date <- as.Date(df.ge$Purchase.Order.Date, format="%b %d, %Y")
ge.bar <- as.data.frame(table(df.ge$Purchase.Order.Date))
colnames(ge.bar) <- c("OrderDate", "NumberofOrders")
ge.bar <- ge.bar[order(ge.bar$OrderDate),]
ge.bar$OrderDate <- format(as.Date(ge.bar$OrderDate), "%b%d")
colnames(df.ge) <- c("Purchasing Document", "Vendor", "Material Number", "Plnt", "ABC Indicator", "Quantity", "Pdt",
"PO Cycle Time", "Purchase Order Date", "Open PO")
View(ge.bar)
runApp()
runApp()
df.ge$Purchase.Order.Date <- as.Date(df.ge$Purchase.Order.Date, format="%b %d, %Y")
load("GE Dashboard.RData")
df.ge$Purchase.Order.Date <- as.Date(df.ge$Purchase.Order.Date, format="%b %d, %Y")
ge.bar <- as.data.frame(table(df.ge$Purchase.Order.Date))
colnames(ge.bar) <- c("OrderDate", "NumberofOrders")
ge.bar$OrderDate <- format(as.Date(ge.bar$OrderDate), "%b%d")
View(ge.bar)
runApp()
View(ge.bar)
runApp()
runApp()
df.ge$Purchase.Order.Date <- as.Date(df.ge$Purchase.Order.Date, format="%b %d, %Y")
ge.bar <- as.data.frame(table(df.ge$Purchase.Order.Date))
load("GE Dashboard.RData")
df.ge$Purchase.Order.Date <- as.Date(df.ge$Purchase.Order.Date, format="%b %d, %Y")
ge.bar <- as.data.frame(table(df.ge$Purchase.Order.Date))
colnames(ge.bar) <- c("OrderDate", "NumberofOrders")
ge.bar$AbbrDate <- format(as.Date(ge.bar$OrderDate), "%b%d")
View(ge.bar)
runApp()
View(ge.bar)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
load("GE Dashboard.RData")
df.ge$Purchase.Order.Date <- as.Date(df.ge$Purchase.Order.Date, format="%b %d, %Y")
ge.bar <- as.data.frame(table(df.ge$Purchase.Order.Date))
colnames(ge.bar) <- c("OrderDate", "NumberofOrders")
ge.bar$OrderDate <- format(as.Date(ge.bar$OrderDate), "%b%d,%y")
ge.bar$OrderDate <- factor(ge.bar$OrderDate, levels = ge.bar[["OrderDate"]])
colnames(df.ge) <- c("Purchasing Document", "Vendor", "Material Number", "Plant ID", "ABC Indicator", "Quantity", "Planned Delivery Time",
"Actual Delivery Time", "Purchase Order Date", "Open PO", "Predicted Delivery Date")
df.ge <- df.ge[,c(1,2,3,4,5,9,11,7,8,10)]
?event_data
runApp()
runApp()
View(df.ge)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
sum(df.ge$`Purchase Order Date` == "2017-04-17" )
View(ge.bar)
sum(df.ge$`Purchase Order Date` == "2017-04-11" )
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(df.ge)
View(ge.bar)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(rsconnect)
rsconnect::setAccountInfo(name='dmdii', token='20FB26F07BCD7288F59BA6FBF5858CEF', secret='poHULxY3ciPAuv+Mr8TJWoNmb8hyBieag85KCrak')
deployApp()
runApp()
runApp()
runApp('~/Desktop/DMDII-prototype')
?box
?dateRangeInput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/Desktop/DMDII/data')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(ge.bar)
runApp()
load("GE Dashboard.RData")
df.ge$Purchase.Order.Date <- as.Date(df.ge$Purchase.Order.Date, format="%b %d, %Y")
ge.bar <- as.data.frame(table(df.ge$Purchase.Order.Date))
colnames(ge.bar) <- c("OrderDate", "NumberofOrders")
ge.bar$OrderDate <- factor(ge.bar$OrderDate, levels = ge.bar[["OrderDate"]])
View(ge.bar)
colnames(df.ge) <- c("Purchasing Document", "Vendor", "Material Number", "Plant ID", "ABC Indicator", "Quantity", "Planned Delivery Time",
"Actual Delivery Time", "Purchase Order Date", "Open PO", "Predicted Delivery Date")
df.ge <- df.ge[,c(1,2,3,4,5,9,11,7,8,10)]
runApp()
runApp()
load("GE Dashboard.RData")
df.ge$Purchase.Order.Date <- as.Date(df.ge$Purchase.Order.Date, format="%b %d, %Y")
ge.bar <- as.data.frame(table(df.ge$Purchase.Order.Date))
colnames(ge.bar) <- c("OrderDate", "NumberofOrders")
colnames(df.ge) <- c("Purchasing Document", "Vendor", "Material Number", "Plant ID", "ABC Indicator", "Quantity", "Planned Delivery Time",
"Actual Delivery Time", "Purchase Order Date", "Open PO", "Predicted Delivery Date")
df.ge <- df.ge[,c(1,2,3,4,5,9,11,7,8,10)]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
2 <= 1
runApp()
runApp()
load("GE Dashboard.RData")
df.ge$Purchase.Order.Date <- as.Date(df.ge$Purchase.Order.Date, format="%b %d, %Y")
ge.bar <- as.data.frame(table(df.ge$Purchase.Order.Date))
colnames(ge.bar) <- c("OrderDate", "NumberofOrders")
colnames(df.ge) <- c("Purchasing Document", "Vendor", "Material Number", "Plant ID", "ABC Indicator", "Quantity", "Planned Delivery Time",
"Actual Delivery Time", "Purchase Order Date", "Open PO", "Predicted Delivery Date")
df.ge <- df.ge[,c(1,2,3,4,5,9,11,7,8,10)]
runApp()
str(ge.bar$OrderDate)
runApp()
View(df.ge)
load("GE Dashboard.RData")
df.ge$Purchase.Order.Date <- as.Date(df.ge$Purchase.Order.Date, format="%b %d, %Y")
ge.bar <- as.data.frame(table(df.ge$Purchase.Order.Date))
colnames(ge.bar) <- c("OrderDate", "NumberofOrders")
ge.bar$OrderDate <- as.Date(ge.bar$OrderDate)
colnames(df.ge) <- c("Purchasing Document", "Vendor", "Material Number", "Plant ID", "ABC Indicator", "Quantity", "Planned Delivery Time",
"Actual Delivery Time", "Purchase Order Date", "Open PO", "Predicted Delivery Date")
df.ge <- df.ge[,c(1,2,3,4,5,9,11,7,8,10)]
View(df.ge)
runApp()
runApp()
load("GE Dashboard.RData")
df.ge$Purchase.Order.Date <- as.Date(df.ge$Purchase.Order.Date, format="%b %d, %Y")
ge.od.bar <- as.data.frame(table(df.ge$Purchase.Order.Date))
colnames(ge.od.bar) <- c("OrderDate", "NumberofOrders")
ge.od.bar$OrderDate <- as.Date(ge.od.bar$OrderDate)
ge.pdd.bar <- as.data.frame(table(df.ge$`Predicted Delivery Date`))
colnames(ge.od.bar) <- c("PredictedDate", "NumberofOrders")
ge.pdd.bar$PredictedDate <- as.Date(ge.pdd.bar$PredictedDate)
ge.pdd.bar <- as.data.frame(table(df.ge$`Predicted Delivery Date`))
View(df.ge)
runApp()
load("GE Dashboard.RData")
df.ge$Purchase.Order.Date <- as.Date(df.ge$Purchase.Order.Date, format="%b %d, %Y")
View(df.ge)
load("GE Dashboard.RData")
View(df.ge)
load("GE Dashboard.RData")
View(df.ge)
df.ge$Purchase.Order.Date <- as.Date(df.ge$Purchase.Order.Date, format="%b %d, %Y")
df.ge$Predicted.Delivery.Date <- as.Date(df.ge$Predicted.Delivery.Date, format="%b %d, %Y")
ge.od.bar <- as.data.frame(table(df.ge$Purchase.Order.Date))
colnames(ge.od.bar) <- c("OrderDate", "NumberofOrders")
ge.od.bar$OrderDate <- as.Date(ge.od.bar$OrderDate)
ge.pdd.bar <- as.data.frame(table(df.ge$Predicted.Delivery.Date))
colnames(ge.od.bar) <- c("PredictedDate", "NumberofOrders")
ge.pdd.bar$PredictedDate <- as.Date(ge.pdd.bar$PredictedDate)
View(ge.pdd.bar)
View(ge.od.bar)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
load("GE Dashboard.RData")
df.ge$Purchase.Order.Date <- as.Date(df.ge$Purchase.Order.Date, format="%b %d, %Y")
df.ge$Predicted.Delivery.Date <- as.Date(df.ge$Predicted.Delivery.Date, format="%b %d, %Y")
ge.od.bar <- as.data.frame(table(df.ge$Purchase.Order.Date))
colnames(ge.od.bar) <- c("OrderDate", "NumberofOrders")
ge.od.bar$OrderDate <- as.Date(ge.od.bar$OrderDate)
ge.pdd.bar <- as.data.frame(table(df.ge$Predicted.Delivery.Date))
colnames(ge.pdd.bar) <- c("PredictedDate", "NumberofOrders")
ge.pdd.bar$PredictedDate <- as.Date(ge.pdd.bar$PredictedDate)
View(ge.pdd.bar)
runApp()
?dateRangeInput
runApp()
runApp()
runApp()
runApp()
runApp()
